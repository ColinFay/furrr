% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/future_invoke_map.R
\name{future_invoke_map}
\alias{future_invoke_map}
\alias{future_invoke_map_chr}
\alias{future_invoke_map_dbl}
\alias{future_invoke_map_int}
\alias{future_invoke_map_lgl}
\alias{future_invoke_map_dfr}
\alias{future_invoke_map_dfc}
\title{Invoke functions via futures}
\usage{
future_invoke_map(.f, .x = list(NULL), ..., .env = NULL,
  .progress = FALSE, .options = future_options())

future_invoke_map_chr(.f, .x = list(NULL), ..., .env = NULL,
  .progress = FALSE, .options = future_options())

future_invoke_map_dbl(.f, .x = list(NULL), ..., .env = NULL,
  .progress = FALSE, .options = future_options())

future_invoke_map_int(.f, .x = list(NULL), ..., .env = NULL,
  .progress = FALSE, .options = future_options())

future_invoke_map_lgl(.f, .x = list(NULL), ..., .env = NULL,
  .progress = FALSE, .options = future_options())

future_invoke_map_dfr(.f, .x = list(NULL), ..., .env = NULL,
  .progress = FALSE, .options = future_options())

future_invoke_map_dfc(.f, .x = list(NULL), ..., .env = NULL,
  .progress = FALSE, .options = future_options())
}
\arguments{
\item{.f}{A function, formula, or atomic vector.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it
is converted to an extractor function. Character vectors index by name
and numeric vectors index by position; use a list to index by position
and name at different levels. Within a list, wrap strings in \code{\link[=get-attr]{get-attr()}}
to extract named attributes. If a component is not present, the value of
\code{.default} will be returned.}

\item{.x}{A list or atomic vector.}

\item{...}{Additional arguments passed on to \code{.f}.}

\item{.env}{Environment in which \code{\link[=do.call]{do.call()}} should
evaluate a constructed expression. This only matters if you pass
as \code{.f} the name of a function rather than its value, or as
\code{.x} symbols of objects rather than their values.}

\item{.progress}{A logical, for whether or not to print a progress bar for
multiprocess, multisession, and multicore plans.}

\item{.options}{The \code{future} specific options to use with the workers. This must
be the result from a call to \code{\link[=future_options]{future_options()}}.}
}
\description{
These functions work exactly the same as \code{\link[purrr:invoke_map]{purrr::invoke_map()}} functions, but allow
you to invoke in parallel.
}
\examples{

plan(multiprocess)

df <- dplyr::tibble(
  f = c("runif", "rpois", "rnorm"),
  params = list(
    list(n = 10),
    list(n = 5, lambda = 10),
    list(n = 10, mean = -3, sd = 10)
  )
)

future_invoke_map(df$f, df$params)


}
