% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/future_map2.R
\name{future_map2}
\alias{future_map2}
\alias{future_map2_chr}
\alias{future_map2_dbl}
\alias{future_map2_int}
\alias{future_map2_lgl}
\alias{future_map2_dfr}
\alias{future_map2_dfc}
\title{Map over multiple inputs simulatneously via futures}
\usage{
future_map2(.x, .y, .f, ..., .progress = FALSE, .options = future_options())

future_map2_chr(.x, .y, .f, ..., .progress = FALSE,
  .options = future_options())

future_map2_dbl(.x, .y, .f, ..., .progress = FALSE,
  .options = future_options())

future_map2_int(.x, .y, .f, ..., .progress = FALSE,
  .options = future_options())

future_map2_lgl(.x, .y, .f, ..., .progress = FALSE,
  .options = future_options())

future_map2_dfr(.x, .y, .f, ..., .id = NULL, .progress = FALSE,
  .options = future_options())

future_map2_dfc(.x, .y, .f, ..., .progress = FALSE,
  .options = future_options())
}
\arguments{
\item{.x}{Vectors of the same length. A vector of length 1 will
be recycled.}

\item{.y}{Vectors of the same length. A vector of length 1 will
be recycled.}

\item{.f}{A function, formula, or atomic vector.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it
is converted to an extractor function. Character vectors index by name
and numeric vectors index by position; use a list to index by position
and name at different levels. Within a list, wrap strings in \code{\link[=get-attr]{get-attr()}}
to extract named attributes. If a component is not present, the value of
\code{.default} will be returned.}

\item{...}{Additional arguments passed on to \code{.f}.}

\item{.progress}{A logical, for whether or not to print a progress bar for
multiprocess, multisession, and multicore plans.}

\item{.options}{The \code{future} specific options to use with the workers. This must
be the result from a call to \code{\link[=future_options]{future_options()}}.}

\item{.id}{If not \code{NULL} a variable with this name will be created
giving either the name or the index of the data frame.}
}
\value{
An atomic vector, list, or data frame, depending on the suffix.
Atomic vectors and lists will be named if \code{.x} or the first element of \code{.l} is named.

If all input is length 0, the output will be length 0.
If any input is length 1, it will be recycled to the length of the longest.
}
\description{
These functions work exactly the same as \code{\link[purrr:map2]{purrr::map2()}} functions, but allow
you to run the map in parallel. Note that "parallel" as described in \code{purrr}
is just saying that you are working with multiple inputs, and parallel in
this case means that you can work on multiple inputs AND process
them all in parallel as well.
}
\examples{

library(furrr)
plan(multiprocess)

x <- list(1, 10, 100)
y <- list(1, 2, 3)

future_map2(x, y, ~ .x + .y)

# Split into pieces, fit model to each piece, then predict
by_cyl <- split(mtcars, mtcars$cyl)
mods <- future_map(by_cyl, ~ lm(mpg ~ wt, data = .))
future_map2(mods, by_cyl, predict)

}
