% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/future_map.R
\name{future_map}
\alias{future_map}
\alias{future_map_chr}
\alias{future_map_dbl}
\alias{future_map_int}
\alias{future_map_lgl}
\alias{future_map_dfr}
\alias{future_map_dfc}
\alias{future_map_if}
\alias{future_map_at}
\title{Apply a function to each element of a vector via futures}
\usage{
future_map(.x, .f, ..., .progress = FALSE, future.globals = TRUE,
  future.packages = NULL, future.seed = FALSE, future.lazy = FALSE,
  future.scheduling = 1)

future_map_chr(.x, .f, ..., .progress = FALSE, future.globals = TRUE,
  future.packages = NULL, future.seed = FALSE, future.lazy = FALSE,
  future.scheduling = 1)

future_map_dbl(.x, .f, ..., .progress = FALSE, future.globals = TRUE,
  future.packages = NULL, future.seed = FALSE, future.lazy = FALSE,
  future.scheduling = 1)

future_map_int(.x, .f, ..., .progress = FALSE, future.globals = TRUE,
  future.packages = NULL, future.seed = FALSE, future.lazy = FALSE,
  future.scheduling = 1)

future_map_lgl(.x, .f, ..., .progress = FALSE, future.globals = TRUE,
  future.packages = NULL, future.seed = FALSE, future.lazy = FALSE,
  future.scheduling = 1)

future_map_dfr(.x, .f, ..., .id = NULL, .progress = FALSE,
  future.globals = TRUE, future.packages = NULL, future.seed = FALSE,
  future.lazy = FALSE, future.scheduling = 1)

future_map_dfc(.x, .f, ..., .progress = FALSE, future.globals = TRUE,
  future.packages = NULL, future.seed = FALSE, future.lazy = FALSE,
  future.scheduling = 1)

future_map_if(.x, .p, .f, ..., .progress = FALSE, future.globals = TRUE,
  future.packages = NULL, future.seed = FALSE, future.lazy = FALSE,
  future.scheduling = 1)

future_map_at(.x, .at, .f, ..., .progress = FALSE, future.globals = TRUE,
  future.packages = NULL, future.seed = FALSE, future.lazy = FALSE,
  future.scheduling = 1)
}
\arguments{
\item{.x}{A list or atomic vector.}

\item{.f}{A function, formula, or atomic vector.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it
is converted to an extractor function. Character vectors index by name
and numeric vectors index by position; use a list to index by position
and name at different levels. Within a list, wrap strings in \code{\link[=get-attr]{get-attr()}}
to extract named attributes. If a component is not present, the value of
\code{.default} will be returned.}

\item{...}{Additional arguments passed on to \code{.f}.}

\item{.progress}{A logical, for whether or not to print a progress bar for
multiprocess, multisession, and multicore plans.}

\item{future.globals}{A logical, a character vector, or a named list for
controlling how globals are handled. For details, see below section.}

\item{future.packages}{(optional) a character vector specifying packages
to be attached in the R environment evaluating the future.}

\item{future.seed}{A logical or an integer (of length one or seven),
or a list of \code{length(.x)} with pre-generated random seeds.
For details, see below section.}

\item{future.lazy}{Specifies whether the futures should be resolved
lazily or eagerly (default).}

\item{future.scheduling}{Average number of futures ("chunks") per worker.
If \code{0.0}, then a single future is used to process all elements
of \code{.x}.
If \code{1.0} or \code{TRUE}, then one future per worker is used.
If \code{2.0}, then each worker will process two futures
(if there are enough elements in \code{.x}).
If \code{Inf} or \code{FALSE}, then one future per element of
\code{.x} is used.}

\item{.id}{If not \code{NULL} a variable with this name will be created
giving either the name or the index of the data frame.}

\item{.p}{A single predicate function, a formula describing such a
predicate function, or a logical vector of the same length as \code{.x}.
Alternatively, if the elements of \code{.x} are themselves lists of
objects, a string indicating the name of a logical element in the
inner lists. Only those elements where \code{.p} evaluates to
\code{TRUE} will be modified.}

\item{.at}{A character vector of names or a numeric vector of
positions. Only those elements corresponding to \code{.at} will be
modified.}
}
\value{
All functions return a vector the same length as \code{.x}.

\code{\link[=future_map]{future_map()}} returns a list, \code{\link[=future_map_lgl]{future_map_lgl()}} a logical vector,
\code{\link[=future_map_int]{future_map_int()}} an integer vector, \code{\link[=future_map_dbl]{future_map_dbl()}} a double vector,
and \code{\link[=future_map_chr]{future_map_chr()}} a character vector.
The output of \code{.f} will be automatically typed upwards,
e.g. logical -> integer -> double -> character.
}
\description{
These functions work exactly the same as \code{\link[purrr:map]{purrr::map()}} functions, but allow
you to run the map in parallel. There are a number of \code{future.*} arguments
to allow you to fine tune the parallel processing. The documentation is
adapted from both \code{purrr::map()}, and \code{future.apply::future_lapply()},
so look there for more details.
}
\section{Global variables}{

Argument \code{future.globals} may be used to control how globals
should be handled similarly how the \code{globals} argument is used with
\code{future()}.
Since all function calls use the same set of globals, this function can do
any gathering of globals upfront (once), which is more efficient than if
it would be done for each future independently.
If \code{TRUE}, \code{NULL} or not is specified (default), then globals
are automatically identified and gathered.
If a character vector of names is specified, then those globals are gathered.
If a named list, then those globals are used as is.
In all cases, \code{.f} and any \code{...} arguments are automatically
passed as globals to each future created as they are always needed.
}

\section{Reproducible random number generation (RNG)}{

Unless \code{future.seed = FALSE}, this function guarantees to generate
the exact same sequence of random numbers \emph{given the same initial
seed / RNG state} - this regardless of type of futures and scheduling
("chunking") strategy.

RNG reproducibility is achieved by pregenerating the random seeds for all
iterations (over \code{.x}) by using L'Ecuyer-CMRG RNG streams.  In each
iteration, these seeds are set before calling \code{.f(.x[[ii]], ...)}.
\emph{Note, for large \code{length(.x)} this may introduce a large overhead.}
As input (\code{future.seed}), a fixed seed (integer) may be given, either
as a full L'Ecuyer-CMRG RNG seed (vector of 1+6 integers) or as a seed
generating such a full L'Ecuyer-CMRG seed.
If \code{future.seed = TRUE}, then \code{\link[base:Random]{.Random.seed}}
is returned if it holds a L'Ecuyer-CMRG RNG seed, otherwise one is created
randomly.
If \code{future.seed = NA}, a L'Ecuyer-CMRG RNG seed is randomly created.
If none of the function calls \code{.f(.x[[ii]], ...)} uses random number
generation, then \code{future.seed = FALSE} may be used.

In addition to the above, it is possible to specify a pre-generated
sequence of RNG seeds as a list such that
\code{length(future.seed) == length(.x)} and where each element is an
integer seed that can be assigned to \code{\link[base:Random]{.Random.seed}}.
Use this alternative with caution.
\strong{Note that \code{as.list(seq_along(.x))} is \emph{not} a valid set of such
\code{.Random.seed} values.}

In all cases but \code{future.seed = FALSE}, the RNG state of the calling
R processes after this function returns is guaranteed to be
"forwarded one step" from the RNG state that was before the call and
in the same way regardless of \code{future.seed}, \code{future.scheduling}
and future strategy used.  This is done in order to guarantee that an \R
script calling \code{future_map()} multiple times should be numerically
reproducible given the same initial seed.
}

\examples{

library(furrr)
library(dplyr) # for the pipe

plan(multiprocess)

1:10 \%>\%
  future_map(rnorm, n = 10) \%>\%
  future_map_dbl(mean)

# If each element of the output is a data frame, use
# map_dfr to row-bind them together:
mtcars \%>\%
  split(.$cyl) \%>\%
  future_map(~ lm(mpg ~ wt, data = .x)) \%>\%
  future_map_dfr(~ as.data.frame(t(as.matrix(coef(.)))))

}
